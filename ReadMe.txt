*** Note
The supplemental document ("RA_L_20_1319_Supplemental_Document.pdf") contains the instructions 
and explanations for the MATLAB simulation codes of the main paper "Inverse Optimal Robust Adaptive 
Controller for Upper Limb Rehabilitation Exoskeletons with Inertia and Load Uncertainties" by Jiamin Wang,
and Oumar R. Barry (obarry@vt.edu), Deparment of Mechanical Engineering, Virginia Tech.

The following informations are also included the supplemental document, which provides a clearer view of
the simulation code information.





*** Requirement
The codes are tested with MATLAB 2018b, and should be compatible with any versions above MATLAB 2017b.
The dynamical models for both simulation examples (i.e., the stationary upper limb exoskeleton (Arm4D)
and the wearable wrist exoskeleton (TAWE)) are generated and pre-compiled for 64-bit Windows (.mexw64)
and Linux (.mexa64) systems [1]. For any issues encountered with the use of pre-compiled functions (e.g.,
XXX mex.mexw64 or XXX mex.mexa64), please try switch to the corresponding function scripts (e.g., XXX.m),
which are slower but more compatible with different MATLAB versions.





*** Contact
The open source simulation codes can be be found at 
	https://github.com/VibRoLab-Group/IORAC_Exo
after the publication of the main paper. We will update the codes for possible future contents and
corrections. To report errors and technical problems, please feel free to contact the authors (jmechw@vt.edu
or obarry@vt.edu). Thank you!





*** Instruction
The project root folder is IORAC_RA_L_20_1319/, or equivalently ./ hereinafter. The main simulation scripts
use PathSetup.m to recursively include all subfolders within ./ to the project directory search path. Hence,
please do not remove PathSetup.m from the root folder.

The simulations require tracking references that can be randomly generated by ./Arm4D_JacFuncGen.m
and ./TAWE_TrajGen.m. Once the simulation results are generated, the user can use Arm4D_Figures.m
and TAWE_Figures.m to plot the results in a way similar to those presented in the paper. The user can also
download sample tracking reference data from 
	https://github.com/VibRoLab-Group/IORAC_Exo 
to observe simulation results identical to those shown in the paper. The simulations also support 3D visualizations.
This utility requires .stl 3D mesh models available in the online repository as well.

Since the simulation code adopts the fixed step size Runge-Kutta 4th method for numerical integration,
it should be noted that the simulation and control sampling rates are crucial to the stability of simulations.
The control sampling rate also limits the controller application in practice. When extremely large gains,
disturbances, and noises are implemented, please adjust the sampling rates accordingly. When the sampling
rates are changed, please also remember to generate new tracking references.





*** Main Simulation Scripts
The following files located in ./ are the main simulation scripts with detailed comments:

(1) Arm4D_Figures.m generates the plots for the stationary upper limb exoskeleton (Arm4D) simulations.
The plots generated are for Fig. 2, Fig. 3, and Fig. 4 in the main paper.

(2) Arm4D_InertiaMatrixObservation.m demonstrates how Eq.(22) is obtained from the stationary upper
limb exoskeleton (Arm4D) model, and shows that it is not uncertain inertia parameters, but their linear
combinations that uniquely affect the inertia matrix.

(3) Arm4D_JacFuncGen.m generates the uncertain parameter Jacobian function introduced by a unknown
body. The uncertain parameters include mass, moment of inertia, and load parameters at load tetrahedron
(for center of mass estimation). The generated function is used in stationary upper limb exoskeleton
(Arm4D) simulations.

(4) Arm4D_Parameters.m contains the simulation, model, and control parameters for all stationary upper
limb exoskeleton (Arm4D) simulations.

(5) Arm4D_Simulation_Disturbance.m contains the code for stationary upper limb exoskeleton (Arm4D)
simulations under disturbance. It contains both Link 3 and Link 4 uncertainties. The performance of
PD, SMC, and IO-RAC feedback controllers are generated for comparison.

(6) Arm4D_Simulation_NoDisturbance.m contains the code for stationary upper limb exoskeleton (Arm4D)
simulations under no disturbance. It contains the simulations with two uncertainty conditions (i.e., with
Link 4 uncertainty only, and with both Link 3 and Link 4 uncertainties).

(7) Arm4D_TrajGen.m randomly generates the tracking references and disturbances for all stationary upper
limb exoskeleton (Arm4D) simulations.

(8) TAWE_EKFParam.m contains the default EKF parameters for the wrist kinematic identifications in the
control simulation of wearable wrist exoskeleton (TAWE).

(9) TAWE_Figures.m generates the plots for TAWE simulations. The plots generated are for Fig. 6 in the
main paper.

(10) TAWE_JacFuncGen.m generates the uncertain parameter Jacobian function introduced by a unknown
body. The uncertain parameters includes mass, moment of inertia, and load parameters at load tetrahedron
(for center of mass estimation). The generated function is used in wearable wrist exoskeleton (TAWE) simulations.

(11) TAWE_Parameters.m contains the simulation, model, and control parameters for all wearable wrist exoskeleton
(TAWE) simulations.

(12) TAWE_Simulation_NoWristID.m contains the simulation code for the wearable wrist exoskeleton (TAWE)
without wrist kinematic identification (WKI), tremor, or disturbance.

(13) TAWE_Simulation_WristID.m contains the simulation code for the wearable wrist exoskeleton with wrist
kinematic identification and disturbance. The simulations also feature tremor and its suppression via
the proposed controller.

(14) TAWE_TrajGen.m randomly generates the tracking references and disturbances for all wearable wrist
exoskeleton (TAWE) simulations.





*** Common Files
The following folders contain codes and data for 3D visualizations, which will not be discussed in detail:

(1) ./STL/ contains the 3D .stl mesh models for simulations obtained from CAD designs:
(arm4DBasePart.STL, arm4DLink1.STL, arm4DLink2.STL, arm4DLink3.STL, arm4DLink4.STL,
taweArmBase.STL, taweArmHand.STL, taweExoBaseLink.STL, taweExoLink1.STL, taweExoLink2.STL,
taweExoLink3.STL, taweExoLink4.STL, taweExoLinkJoint.STL, taweExoPan.STL).

(2) ./Visualization/ contains a simple toolbox for 3D visualization during simulations, and codes for plot
generations based on collected simulation data:
(XYZFramePatch.mat, drawingParam.m, jDic.m, jObj.m, sAxes.m, sPatch.m, sPlot.m, stlread.m,
subplotPosSet.m).


The following mathematical functions included in ./CommonFunction/ are used by both simulations
(details of the codes are commented in the scripts):

(1) ekfStep.m iterates one step of the extended Kalman filter process.

(2) genFreqTraj.m generates periodic or quasiperiodic trajectories (and their 1st and 2nd order timederivatives)
composed of harmonic waves of different frequencies, amplitudes, and phases within a provided
time span. Note that the amplitudes are randomly generated.

(3) quat2Mat.m converts a unit quaternion to its corresponding rotation Matrix.

(4) quat2YPR.m converts a unit quaternion to its corresponding yaw-pitch-roll Euler angles.

(5) quatConj.m calculates the conjugate of a quaternion.

(6) quatMultiply.m cross-multiplies two quaternions.

(7) skew3.m convert 3x1 vector to a skew symmetric matrix.

(8) rk4.m numerically integrates an ODE with Runge-Kutta 4th method.

(9) ypr2Mat.m converts a set of yaw-pitch-roll Euler angles to its corresponding rotation Matrix.

(10) ypr2Quat.m converts a set of yaw-pitch-roll Euler angles to its corresponding unit quaternion.


The ./Data/ folder contains the simulation data for both simulations. These files can be generated by
the main simulation scripts:

(1) simLink34Data.mat contains the simulation results for Arm4D simulation (Fig. 3), which assumes no
disturbance, and both Link 3 and Link 4 have model uncertainties. This data can be generated by
./Arm4D_Simulation_NoDisturbance.m.

(2) simLink34DataDisturbance.mat contains the simulation results for Arm4D simulation (Fig. 4), which
assumes model disturbance, and both Link 3 and Link 4 have model uncertainties. The data contains
the performances of PD, SMC, and proposed IO-RAC controllers. This data can be generated by
./Arm4D_Simulation_Disturbance.m.

(3) simLink34Ref.mat contains the tracking reference for Arm4D simulation (Fig. 3), which assumes no
disturbance, and both Link 3 and Link 4 have model uncertainties. This data can be generated by
./Arm4D_TrajGen.m.

(4) simLink34RefDisturbance.mat contains the tracking reference for Arm4D simulation (Fig. 4), which
assumes model disturbance, and both Link 3 and Link 4 have model uncertainties. This data can be
generated by ./Arm4D_TrajGen.m.

(5) simLink4Data.mat contains the simulation results for Arm4D simulation (Fig. 2), which assumes no
disturbance, and only Link 4 has model uncertainties. This data can be generated by
./Arm4D_Simulation_NoDisturbance.m.

(6) simLink4Ref.mat contains the tracking reference for Arm4D simulation (Fig. 2), which assumes no
disturbance, and only Link 4 has model uncertainties. This data can be generated by
./Arm4D_TrajGen.m.

(7) simTAWEDataNoWKI.mat contains the simulation results for TAWE simulation (Fig. 6) that does not
involves wrist kinematics identification (WKI). This data can be generated by
./TAWE_Simulation_NoWristID.m

(8) simTAWEDataWKI.mat contains the simulation results for TAWE simulation (Fig. 6) that involves wrist
kinematics identification (WKI). The data contains the performances of the controllers in the presence
of (1) disturbance only; (2) tremor and disturbance (passive suppression); and (3) tremor, disturbance,
and implementation of BMFLC with adaptive control (active suppression). This data can be generated
by ./TAWE_Simulation_WristID.m.

(9) simTAWERef.mat contains the tracking reference, disturbance, sensor noises, and tremor for TAWE
simulation (Fig. 6). This data can be generated by ./TAWE_TrajGen.m.





***Model-Specific Files
The remaining files are model-specific to either Arm4D or TAWE. The model-specific functions are precompiled
for 64-bit Windows (.mexw64) and Linux (.mexa64) systems. Hence, the following will introduce
the original .m scripts only.


The following functions in ./ModelFunction_Arm4D/ include the model information for Arm4D:
(1) Flow_Arm4D.m is the ODE function of the Arm4D system.

(2) Frames_Arm4D.mat lists the coordinate frames of the Arm4D system used in 3D visualization only.

(3) ModelInfo_Arm4D.mat contains the symbolic information (e.g., inertia matrix, generalized forces) of the
Arm4D system. This file is used in ./Arm4D_InertiaMatrixObservation.m only.

(4) System_Arm4D.m numerically calculates the dynamical properties of the Arm4D system based on states,
parameters and inputs.

(5) numTF_Arm4D.m numerically calculates the transformations between frames in the Arm4D system, which
is used in 3D visualization only.

(6) uncertainBodyParamJacobianFunc_Arm4D.m numerically calculates adaptive parameter Jacobian matrix
for uncertainties introduced by an unknown body in Arm4D (used for both Link 3 and Link 4
uncertainties).


The following functions in ./ModelFunction_TAWE/ include the model information for TAWE:

(1) Flow_TAWE.m is the ODE function of the TAWE system.

(2) Frames_TAWE.mat lists the coordinate frames of the TAWE system used in 3D visualization only.

(3) System_TAWE.m numerically calculates the dynamical properties of the TAWE system based on states,
parameters and inputs.

(4) numTF_TAWE.m numerically calculates the transformations between frames in the TAWE system, which
is used in 3D visualization only.

(5) uncertainBodyParamJacobianFunc_TAWE.m numerically calculates adaptive parameter Jacobian matrix
for uncertainties introduced by an unknown body (on the hand) in_TAWE.

(6) taweWKI.mat contains the extended Kalman filter (EKF) states, parameters, and functions used in the
wrist kinematics identification (WKI) process of TAWE simulation (see ./TAWE_WKIParam.m for details,
also see ./CommmonFunction/ekfStep.m for usage).