function [frameTF]=numTF_Arm4D(t,q,p,u,s)
    TFcalc=linkTF(t,q,p,u,s);
    FrameNum=19;
    TF=reshape(TFcalc,[4,4,FrameNum]);
    frameTF=zeros(4,4,FrameNum);
    frameTF(:,:,1)=TF(:,:,1);
    frameCheckList=zeros(1,FrameNum);
    frameCheckList(1)=1;
    for frame=2:FrameNum
        framePath=0;
        %thisTF=eye(4,4);
        
%SWITCHCASE_

		switch frame
		    case 1
		        framePath=[1];
		    case 2
		        framePath=[1  2];
		    case 3
		        framePath=[1  2  3];
		    case 4
		        framePath=[1  2  3  4];
		    case 5
		        framePath=[1  2  3  4  5];
		    case 6
		        framePath=[1  2  3  4  5  6];
		    case 7
		        framePath=[1  2  3  4  5  6  7];
		    case 8
		        framePath=[1  2  3  8];
		    case 9
		        framePath=[1  2  3  4  9];
		    case 10
		        framePath=[1   2   3   4   5  10];
		    case 11
		        framePath=[1   2   3   4   5   6  11];
		    case 12
		        framePath=[1   2   3   4   5  10  12];
		    case 13
		        framePath=[1   2   3   4   5  10  13];
		    case 14
		        framePath=[1   2   3   4   5  10  14];
		    case 15
		        framePath=[1   2   3   4   5  10  15];
		    case 16
		        framePath=[1   2   3   4   5   6  11  16];
		    case 17
		        framePath=[1   2   3   4   5   6  11  17];
		    case 18
		        framePath=[1   2   3   4   5   6  11  18];
		    case 19
		        framePath=[1   2   3   4   5   6  11  19];
		end

        [frameCheckList,TF,frameTF]=frameTFRecur(framePath,frameCheckList,TF,frameTF);
        %{
        for jj=numel(framePath):-1:1
            curNum=framePath(jj);
            curTF=TF(:,:,curNum);
            thisTF=curTF*thisTF;
        end
        
        frameTF(:,:,frame)=thisTF;
        %}
    end
    function [frameCheckList_,TF_,frameTF_]=frameTFRecur(framePath_,frameCheckList_,TF_,frameTF_)
        curNum_=framePath_(end);
        if(~frameCheckList_(curNum_))
            preNum_=framePath_(end-1);
            if(frameCheckList_(preNum_))
                frameTF_(:,:,curNum_)=frameTF_(:,:,preNum_)*TF_(:,:,curNum_);
                frameCheckList_(curNum_)=1;
            else
                [frameCheckList_,TF_,frameTF_]=frameTFRecur(framePath_(1:end-1),frameCheckList_,TF_,frameTF_);
            end
        end
    end

	function out1 = linkTF(t,in2,in3,in4,NHSIGNAL)
	%LINKTF
	%    OUT1 = LINKTF(T,IN2,IN3,IN4,NHSIGNAL)
	%    This function was generated by the Symbolic Math Toolbox version 8.2.
	%    07-Jan-2021 01:57:01
	ang0x = in3(56,:);
	ang0y = in3(57,:);
	ang0z = in3(58,:);
	link0x = in3(29,:);
	link0y = in3(30,:);
	link1x = in3(32,:);
	link0z = in3(31,:);
	link1y = in3(33,:);
	link2x = in3(35,:);
	link1z = in3(34,:);
	link2y = in3(36,:);
	link3x = in3(38,:);
	link2z = in3(37,:);
	link3y = in3(39,:);
	link4x = in3(41,:);
	link3z = in3(40,:);
	link4y = in3(42,:);
	link4z = in3(43,:);
	linkCOM1x = in3(44,:);
	linkCOM1y = in3(45,:);
	linkCOM2x = in3(47,:);
	linkCOM1z = in3(46,:);
	linkCOM2y = in3(48,:);
	linkCOM3x = in3(50,:);
	linkCOM2z = in3(49,:);
	linkCOM3y = in3(51,:);
	linkCOM4x = in3(53,:);
	linkCOM3z = in3(52,:);
	linkCOM4y = in3(54,:);
	linkCOM4z = in3(55,:);
	qJ1__dt_0_ = in2(1,:);
	qJ2__dt_0_ = in2(2,:);
	qJ3__dt_0_ = in2(3,:);
	qJ4__dt_0_ = in2(4,:);
	rTetra = in3(69,:);
	t2 = (cos(ang0z));
	t3 = (sin(ang0x));
	t4 = (sin(ang0z));
	t5 = (cos(ang0x));
	t6 = (sin(ang0y));
	t7 = (sqrt(3.0));
	t8 = (cos(ang0y));
	t9 = (cos(qJ1__dt_0_));
	t10 = (sin(qJ1__dt_0_));
	t11 = (sqrt(6.0));
	t12 = ((rTetra.*t11)./2.0);
	t13 = (sin(qJ2__dt_0_));
	t14 = (cos(qJ2__dt_0_));
	t15 = (sin(qJ3__dt_0_));
	t16 = (cos(qJ3__dt_0_));
	t17 = (sin(qJ4__dt_0_));
	t18 = (cos(qJ4__dt_0_));
	t19 = (rTetra.*t7.*(2.0./3.0));
	outSize=[4,76];
	elementRow=[1,2,3,4,1,2,3,1,2,3,1,2,3,4,1,2,3,1,2,1,2,3,1,2,3,4,1,2,3,2,3,1,2,3,4,1,3,2,1,3,1,2,3,4,1,2,3,2,3,1,2,3,4,1,2,3,1,2,3,4,1,2,3,1,2,3,4,1,2,3,1,2,3,4,1,2,3,1,2,3,4,1,2,3,1,2,3,4,1,2,3,1,2,3,4,1,2,3,1,2,3,4,1,2,3,2,3,4,1,2,3,2,4,1,2,3,1,2,3,4,1,2,3,1,2,3,4,1,2,3,2,3,4,1,2,3,2,4];
	elementCol=[1,2,3,4,5,5,5,6,6,6,7,7,7,8,9,9,9,10,10,11,11,11,12,12,12,12,13,14,14,15,15,16,16,16,16,17,17,18,19,19,20,20,20,20,21,22,22,23,23,24,24,24,24,25,26,27,28,28,28,28,29,30,31,32,32,32,32,33,34,35,36,36,36,36,37,38,39,40,40,40,40,41,42,43,44,44,44,44,45,46,47,48,48,48,48,49,50,51,52,52,52,52,53,54,55,56,56,56,57,58,59,60,60,61,62,63,64,64,64,64,65,66,67,68,68,68,68,69,70,71,72,72,72,73,74,75,76,76];
	elementList=[1.0,1.0,1.0,1.0,t2.*t8,t4.*t8,-t6,-t4.*t5+t2.*t3.*t6,t2.*t5+t3.*t4.*t6,t3.*t8,t3.*t4+t2.*t5.*t6,-t2.*t3+t4.*t5.*t6,t5.*t8,1.0,(t7.*t9)./2.0,t9.*(-1.0./2.0),-t10,1.0./2.0,t7./2.0,(t7.*t10)./2.0,t10.*(-1.0./2.0),t9,link0x,link0y,link0z,1.0,1.0,t14,t13,-t13,t14,link1x,link1y,link1z,1.0,t16,-t15,1.0,t15,t16,link2x,link2y,link2z,1.0,1.0,t18,t17,-t17,t18,link3x,link3y,link3z,1.0,1.0,1.0,1.0,link4x,link4y,link4z,1.0,1.0,1.0,1.0,linkCOM1x,linkCOM1y,linkCOM1z,1.0,1.0,1.0,1.0,linkCOM2x,linkCOM2y,linkCOM2z,1.0,1.0,1.0,1.0,linkCOM3x,linkCOM3y,linkCOM3z,1.0,1.0,1.0,1.0,linkCOM4x,linkCOM4y,linkCOM4z,1.0,1.0,1.0,1.0,-rTetra,rTetra.*t11.*(-1.0./6.0),rTetra.*t7.*(-1.0./3.0),1.0,1.0,1.0,1.0,rTetra,rTetra.*t11.*(-1.0./6.0),rTetra.*t7.*(-1.0./3.0),1.0,1.0,1.0,1.0,rTetra.*t11.*(-1.0./6.0),t19,1.0,1.0,1.0,1.0,t12,1.0,1.0,1.0,1.0,-rTetra,rTetra.*t11.*(-1.0./6.0),rTetra.*t7.*(-1.0./3.0),1.0,1.0,1.0,1.0,rTetra,rTetra.*t11.*(-1.0./6.0),rTetra.*t7.*(-1.0./3.0),1.0,1.0,1.0,1.0,rTetra.*t11.*(-1.0./6.0),t19,1.0,1.0,1.0,1.0,t12,1.0];
	out1=zeros(outSize(1),outSize(2));
	for eleNum=1:length(elementList)
	    out1(elementRow(eleNum),elementCol(eleNum))=elementList(eleNum);
	end

	end

end

